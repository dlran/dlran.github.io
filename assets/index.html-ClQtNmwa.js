import{_ as i,c as a,a as n,o as e}from"./app-CKWm9kWX.js";const l={};function t(h,s){return e(),a("div",null,s[0]||(s[0]=[n(`<p>JavaScript 事件循环（Event Loop）不会在没有任务时主动检查队列，而是进入“空闲状态”**，等待新的任务触发。</p><hr><h2 id="_1-事件循环机制" tabindex="-1"><a class="header-anchor" href="#_1-事件循环机制"><span><strong>1. 事件循环机制</strong></span></a></h2><p>JavaScript 的事件循环由两大任务队列组成：</p><ul><li><strong>微任务队列（Microtask Queue）</strong>：包括 <code>Promise.then()</code>、<code>MutationObserver</code>、<code>queueMicrotask()</code> 等。</li><li><strong>宏任务队列（Macrotask Queue）</strong>：包括 <code>setTimeout()</code>、<code>setInterval()</code>、<code>setImmediate()</code>、<code>MessageChannel</code>、I/O 事件等。</li></ul><p><strong>事件循环的步骤如下：</strong></p><ol><li><strong>执行同步代码（脚本整体代码）</strong>。</li><li><strong>执行微任务队列</strong>（一次性清空所有微任务）。</li><li><strong>执行下一个宏任务（如果有的话）</strong>。</li><li><strong>重复步骤 2 &amp; 3，直到所有任务处理完</strong>。</li><li><strong>如果微任务 &amp; 宏任务都为空，JS 线程进入“空闲状态”，等待新的任务到来</strong>。</li></ol><hr><h2 id="_2-js-线程在任务队列为空时的行为" tabindex="-1"><a class="header-anchor" href="#_2-js-线程在任务队列为空时的行为"><span><strong>2. JS 线程在任务队列为空时的行为</strong></span></a></h2><p>当 <strong>当前线程没有微任务、没有宏任务</strong> 时，JS 线程会 <strong>停止执行，不会主动轮询检查任务队列</strong>，而是 <strong>等待新的事件触发</strong>：</p><ul><li><strong>如果没有新任务，JS 线程进入休眠（Idle 状态）</strong>，不会浪费 CPU 资源。</li><li><strong>一旦有新的任务（比如用户交互、网络请求返回、定时器触发）</strong>，事件循环会重新启动，执行新的任务。</li></ul><h3 id="🚀-示例-所有任务都执行完毕-js-线程进入空闲" tabindex="-1"><a class="header-anchor" href="#🚀-示例-所有任务都执行完毕-js-线程进入空闲"><span><strong>🚀 示例：所有任务都执行完毕，JS 线程进入空闲</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">同步代码</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 添加微任务</span></span>
<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">Promise</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">resolve</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">().</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">then</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">微任务 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">));</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 添加宏任务</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setTimeout</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">宏任务 1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">同步代码结束</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>执行顺序：</strong></p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>同步代码</span></span>
<span class="line"><span>同步代码结束</span></span>
<span class="line"><span>微任务 1  &lt;-- 清空所有微任务</span></span>
<span class="line"><span>宏任务 1  &lt;-- 执行宏任务</span></span>
<span class="line"><span>（然后 JS 线程进入空闲状态，等待新的任务）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>🛑 这里不会无限循环检查队列</strong>，如果没有新的任务，JS 线程就进入休眠。</p><hr><h2 id="_3-什么情况下-js-线程会持续运行" tabindex="-1"><a class="header-anchor" href="#_3-什么情况下-js-线程会持续运行"><span><strong>3. 什么情况下 JS 线程会持续运行？</strong></span></a></h2><p><strong>只有当新的任务不断加入，JS 线程才会继续运行！</strong></p><h3 id="情况-1-定时器-宏任务-不断触发" tabindex="-1"><a class="header-anchor" href="#情况-1-定时器-宏任务-不断触发"><span><strong>情况 1：定时器（宏任务）不断触发</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">setInterval</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =&gt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">定时任务</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1000</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>setInterval()</code> <strong>每隔 1 秒加入一个新的宏任务</strong>，JS 线程不会进入休眠。</li></ul><h3 id="情况-2-递归的-queuemicrotask-或-promise-then-微任务" tabindex="-1"><a class="header-anchor" href="#情况-2-递归的-queuemicrotask-或-promise-then-微任务"><span><strong>情况 2：递归的 <code>queueMicrotask()</code> 或 <code>Promise.then()</code>（微任务）</strong></span></a></h3><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">function</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  console</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">log</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">微任务执行</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">  queueMicrotask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 递归触发微任务</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">loop</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>这种情况会阻塞 JS 线程，导致主线程一直繁忙，页面无法响应交互</strong>（类似 <strong>死循环</strong>）。</li></ul>`,25)]))}const r=i(l,[["render",t]]),p=JSON.parse('{"path":"/article/bx3i7v0d/","title":"JavaScript 事件循环","lang":"zh-CN","frontmatter":{"title":"JavaScript 事件循环","tags":["JavaScript"],"createTime":"2024/06/13 13:23:22","permalink":"/article/bx3i7v0d/"},"readingTime":{"minutes":2.02,"words":605},"git":{"updatedTime":1749957276000,"changelog":[{"hash":"13186debee90c844663d33582e6bd52fe59a5bfc","time":1749957276000,"email":"rr@jjyy.bb","author":"rr","message":"initial"}]},"filePathRelative":"Code/JSEventLoop.md","headers":[],"categoryList":[{"id":"ca0dba","sort":10001,"name":"Code"}]}');export{r as comp,p as data};
